/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseBetween(head *ListNode, left int, right int) *ListNode {
    dummyHead := &ListNode{}
    dummyHead.Next = head
    pre := dummyHead
    for i := 0; i < left - 1; i++ {
        pre = pre.Next
    }
    cur := pre.Next
    for i := 0; i < right - left; i++ {
        next := cur.Next
        cur.Next = next.Next
        //next.Next = cur ×
        //left = 2, right = 5
        //1 2 3 4 5 6 7 8
        //1 3 2 4 5 6 7 8
        //1 4 3 2 5 6 7 8
        //1 5 4 3 2 6 7 8
        //cur是next的前一个，只有第一次是对的，后面是错的
        //next应该接到已反转链表的最前面(pre.Next)，而不是它的前一个(cur)
        next.Next = pre.Next
        pre.Next = next
    }
    return dummyHead.Next
}