/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func isPalindrome(head *ListNode) bool {
    firstHalfEnd := func(head *ListNode) *ListNode {
        slow, fast := head, head
        for fast.Next != nil && fast.Next.Next != nil {
            slow = slow.Next
            fast = fast.Next.Next
        }
        return slow
    }
    reverseList := func(head *ListNode) *ListNode {
        var pre, next *ListNode
        cur := head
        for cur != nil {
            next = cur.Next
            cur.Next = pre
            pre = cur
            cur = next
        }
        return pre
    }
    p1, p2 := head, reverseList(firstHalfEnd(head).Next)
    for p2 != nil {
        if p1.Val != p2.Val {
            return false
        } else {
            p1, p2 = p1.Next, p2.Next
        }
    }
    return true
}