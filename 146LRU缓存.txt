type DlinkedNode struct {
    key, value int
    pre, next *DlinkedNode
}

type LRUCache struct {
    size, capacity int
    head, tail *DlinkedNode
    cache map[int]*DlinkedNode
}

func Constructor(capacity int) LRUCache {
    head, tail := &DlinkedNode{}, &DlinkedNode{}
    head.next = tail
    tail.pre = head
    return LRUCache {
        capacity: capacity,
        head: head,
        tail: tail,
        cache: make(map[int]*DlinkedNode),
    }
}

func (this *LRUCache) addToHead(node *DlinkedNode) {
    node.pre = this.head
    node.next = this.head.next
    this.head.next.pre = node
    this.head.next = node
}

func (this *LRUCache) removeNode(node *DlinkedNode) {
    node.pre.next = node.next
    node.next.pre = node.pre
}

func (this *LRUCache) moveToHead(node *DlinkedNode) {
    this.removeNode(node)
    this.addToHead(node)
}

func (this *LRUCache) removeTail() *DlinkedNode {
    node := this.tail.pre
    this.removeNode(node)
    return node
}

func (this *LRUCache) Get(key int) int {
    if node, ok := this.cache[key]; ok {
        this.moveToHead(node)
        return node.value
    }
    return -1
}

func (this *LRUCache) Put(key int, value int)  {
    if node, ok := this.cache[key]; ok {
        node.value = value
        this.moveToHead(node)
    } else {
        addNode := &DlinkedNode{key: key, value: value}
        this.cache[key] = addNode
        this.addToHead(addNode)
        this.size++
        if this.size > this.capacity {
            delNode := this.removeTail()
            delete(this.cache, delNode.key)
            this.size--
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * obj := Constructor(capacity);
 * param_1 := obj.Get(key);
 * obj.Put(key,value);
 */