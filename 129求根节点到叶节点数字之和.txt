/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sumNumbers(root *TreeNode) int {
    var ans int
    if root == nil {
        return ans
    }
    nodeQueue := []*TreeNode{root}
    numQueue := []int{root.Val}
    for len(nodeQueue) > 0 {
        curLayerLen := len(nodeQueue)
        for i := 0; i < curLayerLen; i++ {
            node := nodeQueue[0]
            nodeQueue = nodeQueue[1:]
            num := numQueue[0]
            numQueue = numQueue[1:]
            if node.Left == nil && node.Right == nil {
                ans += num
            }
            if node.Left != nil {
                nodeQueue = append(nodeQueue, node.Left)
                numQueue = append(numQueue, num * 10 + node.Left.Val)
            }
            if node.Right != nil {
                nodeQueue = append(nodeQueue, node.Right)
                numQueue = append(numQueue, num * 10 + node.Right.Val)
            }
        }
    }
    return ans
}