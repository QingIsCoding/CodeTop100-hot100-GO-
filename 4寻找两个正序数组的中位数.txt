func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
    /*
    https://www.acwing.com/solution/content/50/
    nums1找前k/2个数，nums2找前k/2个数，合并就是前k个数
    如果nums1[k/2](小的)<nums2[k/2](大的)
    说明num1[0]~num1[k/2]和num2[0]~num2[k/2]合并后
    合并且排序后的第k个数是nums2[k/2](小的在左边，大的在右边)
    找第k大的元素，删除前k/2个，就是找第k-k/2大的元素
    */
    var findKthNum func(nums1, nums2 []int, start1, end1, start2, end2, k int) int
    findKthNum = func(nums1, nums2 []int, start1, end1, start2, end2, k int) int {
        length1, length2 := end1 - start1 + 1, end2 - start2 + 1
        //确保nums1是较短的数组，稍微减少递归的深度
        if length1 > length2 {
            return findKthNum(nums2, nums1, start2, end2, start1, end1, k)
        }
        //如果nums1已经被完全排除，直接返回nums2中第k大的元素即可，无需进一步递归
        if length1 == 0 {
            return nums2[start2+k-1]
        }
        //找第k大的数，k=1，即找最小的数
        if k == 1 {
            return min(nums1[start1], nums2[start2])
        }
        //nums1找前k/2个数，nums2找前k/2个数，准备进行比较
        END1, END2 := start1 + k / 2 - 1, start2 + k / 2 - 1
        //如果nums1不存在第k/2个数(nums1没有这么多数，越界了)
        //就用nums1最大的数去比较
        //nums1[0]...nums1[k/2] -> nums1[0]...nums1[end1]
        if END1 >= end1 {
            END1 = end1
        }
        //如果nums2不存在第k/2个数(nums2没有这么多数，越界了)
        //就用nums2最大的数去比较
        //nums2[0]...nums2[k/2] -> nums2[0]...nums2[end2]
        if END2 >= end2 {
            END2 = end2
        }
        if nums1[END1] > nums2[END2] {
            //第k大的数是nums1[END1]，而不是nums2[END2]
            //nums2[start2]...nums2[END2]可以过滤掉
            //滤掉END2 - start2 + 1个数
            return findKthNum(nums1, nums2, start1, end1, END2 + 1, end2, k - (END2 - start2 + 1))
        } else {
            //第k大的数是nums2[END2]，而不是nums1[END1]
            //nums1[start1]...nums1[END1]可以过滤掉
            //滤掉END1 - start1 + 1个数
            return findKthNum(nums1, nums2, END1 + 1, end1, start2, end2, k - (END1 - start1 + 1))
        }
    }
    //例：
    //len(nums1) + len(nums2)为奇数5，median1=3，median2=3，中位数为nums[3]
    //len(nums1) + len(nums2)为偶数6，median1=3，median2=4，中位数为(nums[3]+nums[4])/2
    median1 := findKthNum(nums1, nums2, 0, len(nums1) - 1, 0, len(nums2) - 1, (len(nums1) + len(nums2) + 1) / 2)
    median2 := findKthNum(nums1, nums2, 0, len(nums1) - 1, 0, len(nums2) - 1, (len(nums1) + len(nums2) + 2) / 2)
    return float64(median1) * 0.5 + float64(median2) * 0.5
}