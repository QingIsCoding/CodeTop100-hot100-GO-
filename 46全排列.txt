func permute(nums []int) [][]int {
    ans := make([][]int, 0)
    path :=  make([]int, 0)
    used := make([]bool, len(nums))
    var backtracking func(nums []int, used []bool)
    backtracking = func(nums []int, used []bool) {
        if len(path) == len(nums) {
            temp := make([]int, len(path))
            copy(temp, path)
            ans = append(ans, temp)
        }
        for i := 0; i < len(nums); i++ {
            if used[i] == false {
                used[i] = true
                path = append(path, nums[i])
                backtracking(nums, used)
                path = path[:len(path)-1]
                used[i] = false
            }
        }
    }
    backtracking(nums, used)
    return ans
}